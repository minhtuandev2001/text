/////////////////////////////////////////////////////// HELLO CODE //////////////////////////////////////////////////////////////
	1. create server simple
npm init
npm install express --save
npm install nodemon --save-dev
CODE :
const express = require('express');

const app = express();
const port = 3000 ;

// router handler 
app.get('/', (req, res) => {
    res.send('hello word');
})
app.get('/user', (req, res) => {
    res.send('this is page user');
})
app.get('/about', (req, res) => {
    res.send('this is page about');
})

app.listen(port, () => {
    console.log('listening on port', port);
});

//////////////////////////////////////////////////////// TEMPLATE ENGINES ////////////////////////////////////////////////////////
npm install pug --save
: cấu trúc cây thư mục 
	views
		| users
			| index.pug
		| index.pug
	index.js

==> CODE file index.js
const express = require('express');

const app = express();
const port = 3000;

// template engine
app.set('views', './views'); // folder chứa view
app.set('view engine', 'pug'); // khai báo template

// router handler 
app.get('/', (req, res) => {
    res.render('index', { title: 'ex template' });
})
app.get('/user', (req, res) => {
    res.render('users/index', {
        title: 'user list',
        message: 'this is page user',
        list: [
            { name: 'John', email: 'john@gmail.com', from: 'american' },
            { name: 'tuan', email: 'tuan@gmail.com', from: 'viet name' },
            { name: 'tai', email: 'tai@gmail.com', from: 'indonesia' },
        ]
    });
})
app.get('/about', (req, res) => {
    res.send('this is page about');
})


app.listen(port, () => {
    console.log('listening on port', port);
});
==> CODE file users/index.pug
doctype
html(lang='en')
    head
        meta(charset='utf-8')
        title= title
    body
        h1= message
        ul 
            each val in list 
                li= 'name : ' +val.name +  ' email : ' +val.email + ' country : ' +val.from
==> CODE file index.pug
doctype
html(lang='en')
    head
        meta(charset='utf-8')
        title=title
    body
        h1 hello world
        a(href="/user") User list
        hr
        a(href="/about") about
/////////////////////////////////////////////////////// QUERY PARAMETERS /////////////////////////////////////////////////////////
: lấy truy vấn của người dùng 
	- var q = req.query;
: cấu trúc cây thư mục 
	views
		| users
			| index.pug
		| index.pug
	index.js
==> CODE file index.js
const express = require('express');

const app = express();
const port = 3000;

var users = [
    { name: 'John', email: 'john@gmail.com', from: 'american' },
    { name: 'tuan', email: 'tuan@gmail.com', from: 'viet nam' },
    { name: 'tai', email: 'tai@gmail.com', from: 'indonesia' },
];
// template engine
app.set('views', './views'); // folder chứa view
app.set('view engine', 'pug'); // khai báo template

// router handler 
app.get('/', (req, res) => {
    res.render('index', { title: 'ex template' });
})
app.get('/users', (req, res) => {
    res.render('users/index', {
        title: 'user list',
        message: 'this is page user',
        list: users
    });
})

app.get('/users/search', (req, res) => {
    var q = req.query.q ;
    console.log(q);
    // var match = users.filter((users) => { return users.name == q }); // ex1 : phải trùng nhau
    var match = users.filter((users) => { return users.name.toLowerCase().indexOf(q.toLowerCase()) != -1 }); // ex2 :  một phần trùng 
    console.log(match);
    res.render('users/index',{
        title: 'user list search',
        message: 'result search ' + q,
        list: match,
        search: q
    });
    // ex1 : http://localhost:3000/users/search?q=John
    // ex2 : http://localhost:3000/users/search?q=t
})
app.get('/about', (req, res) => {
    res.send('this is page about');
})


app.listen(port, () => {
    console.log('listening on port', port);
});

CODE file views/index.pug

doctype
html(lang='en')
    head
        meta(charset='utf-8')
        title= title
    body
        h1= message
        form(action="/users/search" method="GET")
            label(for='name') Search Name  
            input.form-control(type='text' name='q' placeholder='enter name' value=search)
            button.btn.btn-primary(type='submit') Search
        ul 
            each val in list 
                li= 'name : ' +val.name +  ' email : ' +val.email + ' country : ' +val.from

//////////////////////////////////////////////////////// POST METHOD //////////////////////////////////////////////////////////////
: Thông thường khi client submnit dữ liệu từ form, ta sẽ dùng phương thức POST vì tính an toàn và hữu dụng của nó để lấy dữ liệu.
Ta sử dụng req.body.<name> để lấy dữ liệu tương ứng.
: Từ Express 4.16.10, khi tạo ứng dụng express, mặc định body parser đã được cấu hình sẵn trong file app.js
	- req.body : + Chứa các cặp dữ liệu key-value được gửi trong request body
			 + Mặc định là undefined và được điền khi sử dụng express.json() hoặc express.urlencoded()
		Để sử dụng req.body , thêm 2 middleware bên dưới vào
				+ app.use(express.json()); // for parsing application/json
				+ app.use(express.urlencoded({ extended: true})) // for parsing application/x-www-form-urlencoded
	- res.redirect([status,]path) : + Chuyển hướng đến URL bắt nguồn từ đường dẫn được chỉ định, với status được chỉ định
						  + Status là một số nguyên dương tương ứng với mã status HTTP, nếu không được chỉ định, trạng
thái mặc định là 302 "found"
						  + Ví dụ : res.redirect('/foo/bar')
								res.redirect('http://example.com') // có thể chuyển hướng đến một trang web khác
								res.redirect(301,'http:://example.com')
								res.redirect('../login')
						  + Redirect có thể liên quan đến root của tên máy chủ.
								http:://example.com/admin/post/new
								  ==> res.redirect('/admin');
								http::/example.com/admin
						  + Redirect có thể liên quan đến URL hiện tại (lưu ý dấu gạch chéo ở cuối).
								http:://example.com/blog/admin/
								  ==> res.redirect('post/new')
								http:://example.com/blog/admin/post/new
						  + Redirect đường dẫn tương đối.
								http:://example.com/admin/post/new
								  ==> res.redirect('..')
								http:://example.com/admin/post
						  + Redirect back , mặc định là '/' khi referer không có
								  ==> res.redirect('back')
: Cấu trúc thư mục 
	views
		| users
			| create.pug
			| index.pug
		| index.pug
	index.js
CODE file index.js
const express = require('express');

const app = express();
const port = 3000;

//từ Express 4.16.0 mặc định body parser đã được cấu hình sẵn trong file app.js
// sử dụng 2 middleware bên dưới để sử dụng req.body
app.use(express.json()); // for parsing application/json
app.use(express.urlencoded({ extended: true })); // for parsing application/x-www-form-urlencoded

var users = [
    { id: 1, name: 'John', email: 'john@gmail.com', from: 'american' },
    { id: 2, name: 'tuan', email: 'tuan@gmail.com', from: 'viet nam' },
    { id: 3, name: 'tai', email: 'tai@gmail.com', from: 'indonesia' },
];
// template engine
app.set('views', './views'); // folder chứa view
app.set('view engine', 'pug'); // khai báo template

// router handler 
app.get('/', (req, res) => {
    res.render('index', { title: 'ex template' });
})
app.get('/users', (req, res) => {
    res.render('users/index', {
        title: 'user list',
        message: 'this is page user',
        list: users
    });
})

app.get('/users/search', (req, res) => {
    var q = req.query.q;
    console.log(q);
    // var match = users.filter((users) => { return users.name == q }); // ex1 : phải trùng nhau
    var match = users.filter((users) => { return users.name.toLowerCase().indexOf(q.toLowerCase()) != -1 }); // ex2 :  một phần trùng 
    console.log(match);
    res.render('users/index', {
        title: 'user list search',
        message: 'result search ' + q,
        list: match,
        search: q
    });
    // ex1 : http://localhost:3000/users/search?q=John
    // ex2 : http://localhost:3000/users/search?q=t
})
app.get('/users/create', (req, res) => {
    res.render('users/create', {
        title: 'Create user'
    });
})
app.post('/users/create', (req, res) => {
    // console.log(req.body)
    // res.json(req.body)
    users = [
        ...users,
        { id: users[users.length-1].id + 1, name: req.body.name, email: req.body.email, from: req.body.from }
    ]
    // console.log(users)
    // res.render('users/create', {});
    // res.render('users/index', {
    //     title: 'user list',
    //     message: 'this is page user',
    //     list: users,
    //     checkAdd: true
    // });
    res.redirect('/users')
})
app.get('/about', (req, res) => {
    res.send('this is page about');
})

app.listen(port, () => {
    console.log('listening on port', port);
});
CODE file index.pug
doctype
html(lang='en')
    head
        meta(charset='utf-8')
        title=title
        link(rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css", attr)
        script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js")
    body
        h1 hello world
        a(href="/users") User list
        hr
        a(href="/about") about
CODE file views/users/index.js
doctype
html(lang='en')
    head
        meta(charset='utf-8')
        title= title
        link(rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css", attr)
        script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js")
    body
        h1= message
        a(href="/users/create") new user
        if checkAdd != undefined
            if checkAdd  
                p(style={color: 'red'}) them user thanh cong
            else 
                p='khong the them user' + checkAdd
        form(action="/users/search" method="GET")
            label(for='name') Search Name  
            input.form-control(type='text' name='q' placeholder='enter name' value=search)
            button.btn.btn-primary(type='submit') Search
        ul 
            each val in list 
                li= 'name : ' +val.name +  ' email : ' +val.email + ' country : ' +val.from
CODE file views/users/create.pug
doctype
html(lang='en')
    head
        meta(charset='utf-8')
        title= title
        link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css", attr)
        script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js")
    body
        h1 Create User

        form(action="/users/create" method="POST")
            .form-group
                label(for='name') Name
                input.form-control(type='text' name='name' placeholder='enter name')
            .form-group
                label(for='email') Email
                input.form-control(type='text' name='email' placeholder='enter email')
            .form-group
                label(for='from') Country
                input.form-control(type='text' name='from' placeholder='enter country')
            button.btn.btn-primary(type='submit') Submit
////////////////////////////////////////////////////// TÍCH HỢP DATABASE LOWDB ////////////////////////////////////////////////////
: npm install lowdb@1.0.0
: db.get('users').value();
: db.get('users')
	.push(
			{id: 1, name: "minhtuan" , email: "tuan@gmail.com", from: "viet nam"}
		)
	.write();
: db.get('posts')
  .find({ id: 1 }) // tìm kiếm trong database
  .value()
: // Set some defaults
  db.defaults({ users: [] }) // nếu file db.json chưa có thì tạo với giá trị mặc định 
    .write();

Cấu trúc thư mục
	views
		| users
			| create.pug
			| index.pug
		| index.pug
	db.json // sẽ tự tạo 
	index.js
	nodemon.json
CODE file nodemon.json
{
  "ignore": ["db.json"] 
}
CODE file index.js
const express = require('express');
const low = require('lowdb');
const FileSync = require('lowdb/adapters/FileSync')

const adapter = new FileSync('db.json');
const db = low(adapter)
// Set some defaults
db.defaults({ users: [] })
    .write();


const app = express();
const port = 3000;


//từ Express 4.16.0 mặc định body parser đã được cấu hình sẵn trong file app.js
// sử dụng 2 middleware bên dưới để sử dụng req.body
app.use(express.json()); // for parsing application/json
app.use(express.urlencoded({ extended: true })); // for parsing application/x-www-form-urlencoded

// template engine
app.set('views', './views'); // folder chứa view
app.set('view engine', 'pug'); // khai báo template

// router handler 
app.get('/', (req, res) => {
    res.render('index', { title: 'ex template' });
})
app.get('/users', (req, res) => {
    res.render('users/index', {
        title: 'user list',
        message: 'this is page user',
        list: db.get('users').value() // lấy dữ liệu ra
    });
})

app.get('/users/search', (req, res) => {
    var q = req.query.q;
    console.log(q);
    let dataUser = db.get('users').value();
    var match = dataUser.filter((users) => { return users.name.toLowerCase().indexOf(q.toLowerCase()) != -1 }); // ex2 :  một phần trùng 
    console.log(match);
    res.render('users/index', {
        title: 'user list search',
        message: 'result search ' + q,
        list: match,
        search: q
    });
    // ex1 : http://localhost:3000/users/search?q=John
    // ex2 : http://localhost:3000/users/search?q=t
})
app.get('/users/create', (req, res) => {
    res.render('users/create', {
        title: 'Create user'
    });
})
app.post('/users/create', (req, res) => {
    // Add a post
    let dataUser = db.get('users').value();
    let lenListUser = dataUser.length;
    let newIdUser = 0
    if (lenListUser != 0) {
        newIdUser = dataUser[lenListUser - 1].id + 1;
    }
    db.get('users')
        .push({ id: newIdUser, name: req.body.name, email: req.body.email, from: req.body.from })
        .write()
    // redirect ==> users
    res.redirect('/users')
})
app.get('/about', (req, res) => {
    res.send('this is page about');
})

app.listen(port, () => {
    console.log('listening on port', port);
});
CODE file views/index.pug
doctype
html(lang='en')
    head
        meta(charset='utf-8')
        title=title
        link(rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css", attr)
        script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js")
    body
        h1 hello world
        a(href="/users") User list
        hr
        a(href="/about") about
CODE file views/users/index.pug
doctype
html(lang='en')
    head
        meta(charset='utf-8')
        title= title
        link(rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css", attr)
        script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js")
    body
        h1= message
        a(href="/users/create") new user
        -console.log(typeof list)
        -console.log(list.length)
        if checkAdd != undefined
            if checkAdd  
                p(style={color: 'red'}) them user thanh cong
            else 
                p='khong the them user' + checkAdd
        form(action="/users/search" method="GET")
            label(for='name') Search Name  
            input.form-control(type='text' name='q' placeholder='enter name' value=search)
            button.btn.btn-primary(type='submit') Search
        ul 
            each val in list 
                li= 'name : ' +val.name +  ' email : ' +val.email + ' country : ' +val.from

CODE file views/users/create.pug
doctype
html(lang='en')
    head
        meta(charset='utf-8')
        title= title
        link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css", attr)
        script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js")
    body
        h1 Create User

        form(action="/users/create" method="POST")
            .form-group
                label(for='name') Name
                input.form-control(type='text' name='name' placeholder='enter name')
            .form-group
                label(for='email') Email
                input.form-control(type='text' name='email' placeholder='enter email')
            .form-group
                label(for='from') Country
                input.form-control(type='text' name='from' placeholder='enter country')
            button.btn.btn-primary(type='submit') Submit
///////////////////////////////////////////////////////// VIEW USER ///////////////////////////////////////////////////////////////
: npm install shortid --save // tạo id
Cấu trúc thư mục
	views
		| users
			| create.pug // như cũ
			| index.pug
			| view.pug
		| index.pug // như cũ
	db.json // tự động
	index.js
	nodemon.json // như cũ

CODE file index.js

const express = require('express');
const low = require('lowdb');
const FileSync = require('lowdb/adapters/FileSync');
const shortid = require('shortid'); // tạo id không trùng lặp

const adapter = new FileSync('db.json');
const db = low(adapter)
// Set some defaults
db.defaults({ users: [] })
    .write();


const app = express();
const port = 3000;


//từ Express 4.16.0 mặc định body parser đã được cấu hình sẵn trong file app.js
// sử dụng 2 middleware bên dưới để sử dụng req.body
app.use(express.json()); // for parsing application/json
app.use(express.urlencoded({ extended: true })); // for parsing application/x-www-form-urlencoded

// template engine
app.set('views', './views'); // folder chứa view
app.set('view engine', 'pug'); // khai báo template

// router handler 
app.get('/', (req, res) => {
    res.render('index', { title: 'ex template' });
})
app.get('/users', (req, res) => {
    res.render('users/index', {
        title: 'user list',
        message: 'this is page user',
        list: db.get('users').value() // lấy dữ liệu ra
    });
})

app.get('/users/search', (req, res) => {
    var q = req.query.q;
    console.log(q);
    let dataUser = db.get('users').value();
    var match = dataUser.filter((users) => { return users.name.toLowerCase().indexOf(q.toLowerCase()) != -1 }); // ex2 :  một phần trùng 
    console.log(match);
    res.render('users/index', {
        title: 'user list search',
        message: 'result search ' + q,
        list: match,
        search: q
    });
    // ex1 : http://localhost:3000/users/search?q=John
    // ex2 : http://localhost:3000/users/search?q=t
})
app.get('/users/create', (req, res) => {
    res.render('users/create', {
        title: 'Create user'
    });
})
app.post('/users/create', (req, res) => {
    req.body.id = shortid.generate(); // tạo id 
    // Add a post
    db.get('users')
    .push(req.body)
    .write()
    // redirect ==> users
    res.redirect('/users')
})
// dynamic routing
app.get('/users/:id', (req, res) => {
    let id = req.params.id; // dữ liệu này luôn là string
    console.log(typeof id);
    // get information about user
    let info = db.get('users').find({ id: id}).value()
    console.log(info);
    res.render('users/view',
    {
        title: 'Information user',
        message: info.name,
        user: info
    });
})
app.get('/about', (req, res) => {
    res.send('this is page about');
})

app.listen(port, () => {
    console.log('listening on port', port);
});

CODE file views/users/view.pug
doctype
html(lang='en')
    head
        meta(charset='utf-8')
        title= title
    body
        h1= message
        ul 
            li
                b id : 
                span=user.id
                br
                b name : 
                span=user.name
                br
                b  email : 
                span=user.email
                br
                b country : 
                span=user.from
CODE file views/users/index.pug
doctype
html(lang='en')
    head
        meta(charset='utf-8')
        title= title
        link(rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css", attr)
        script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js")
    body
        h1= message
        a(href="/users/create") new user
        -console.log(typeof list)
        -console.log(list.length)
        if checkAdd != undefined
            if checkAdd  
                p(style={color: 'red'}) them user thanh cong
            else 
                p='khong the them user' + checkAdd
        form(action="/users/search" method="GET")
            label(for='name') Search Name  
            input.form-control(type='text' name='q' placeholder='enter name' value=search)
            button.btn.btn-primary(type='submit') Search
        ul 
            each val in list 
                li
                    span= 'name : ' +val.name +  ' email : ' +val.email + ' country : ' +val.from
                    a(href="/users/"+val.id)   &nbsp; &nbsp; view
////////////////////////////////////////////////////// EXPRESS ROUTER /////////////////////////////////////////////////////////////
: const router = express.Router() : tạo module trình xử lý tuyến đường
: shortid.generate() tạo id không trùng lặp
Cấu trúc thư mục:
	routers
		| user.route.js
	views // như cũ
		| users
			| create.pub
			| index.pub
			| view.pug
		| index.js
	db.js
	db.json // tự động
	index.js
	nodemon.json // như cũ

CODE file index.js

const express = require('express');

// require router users
const usersRouter = require('./routers/user.route');

// khởi tạo ứng dụng thông qua phương thức express()
const app = express();
const port = 3000;

//từ Express 4.16.0 mặc định body parser đã được cấu hình sẵn trong file app.js
// sử dụng 2 middleware bên dưới để sử dụng req.body
app.use(express.json()); // for parsing application/json
app.use(express.urlencoded({ extended: true })); // for parsing application/x-www-form-urlencoded

// template engine
app.set('views', './views'); // folder chứa view
app.set('view engine', 'pug'); // khai báo template

// router handler
app.get('/', (req, res) => {
    res.render('index', { title: 'ex template' });
});
// middleware router
app.use('/users', usersRouter);

app.listen(port, () => {
    console.log('listening on port', port);
});

CODE file db.js

const low = require('lowdb');
const FileSync = require('lowdb/adapters/FileSync');

const adapter = new FileSync('db.json');
const db = low(adapter)

// Set some defaults
db.defaults({ users: [] })
    .write();

module.exports = db

CODE file uẻ.route.js
const express = require('express');
const shortid = require('shortid'); // tạo id không trùng lặp
const router = express.Router();

// require module of project
const db = require('../db');

router.get('/', (req, res) => {
    res.render('users/index', {
        title: 'user list',
        message: 'this is page user',
        list: db.get('users').value() // lấy dữ liệu ra
    });
})
router.get('/search', (req, res) => {
    var q = req.query.q;
    console.log(q);
    let dataUser = db.get('users').value();
    var match = dataUser.filter((users) => { return users.name.toLowerCase().indexOf(q.toLowerCase()) != -1 }); // ex2 :  một phần trùng 
    console.log(match);
    res.render('users/index', {
        title: 'user list search',
        message: 'result search ' + q,
        list: match,
        search: q
    });
    // ex1 : http://localhost:3000/users/search?q=John
    // ex2 : http://localhost:3000/users/search?q=t
})
router.get('/create', (req, res) => {
    res.render('users/create', {
        title: 'Create user'
    });
})
router.post('/create', (req, res) => {
    req.body.id = shortid.generate(); // tạo id 
    // Add a post
    db.get('users')
    .push(req.body)
    .write()
    // redirect ==> users
    res.redirect('/users')
})
// dynamic routing
router.get('/:id', (req, res) => {
    let id = req.params.id; // dữ liệu này luôn là string
    console.log(typeof id);
    // get information about user
    let info = db.get('users').find({ id: id}).value()
    console.log(info);
    res.render('users/view',
    {
        title: 'Information user',
        message: info.name,
        user: info
    });
})

module.exports = router;
/////////////////////////////////////////////////// CONTROLLER ( MVC ) ///////////////////////////////////////////////////////////
Cấu trúc thư mục
	controllers
		| user.controller.js
	routers
		| user.route.js
	views			// như cũ
		| users
			| create.pub
			| index.pug
			| view.pug
		| index.pug
	db.js       	// như cũ
	db.json		// tự động
	index.js		// như cũ
	nodemon.jsomn	// như cũ

CODE file routers/user.route.js

const express = require('express');
const router = express.Router();

const controller = require('../controllers/user.controller')

router.get('/',controller.index)
router.get('/search',controller.search)
router.get('/create', controller.create)
router.post('/create', controller.postCreate)
// dynamic routing
router.get('/:id',controller.get)

module.exports = router;

CODE file controller/user.controller.js

const shortid = require('shortid'); // tạo id không trùng lặp
// require module of project
const db = require('../db');

module.exports.index = (req, res) => {
    res.render('users/index', {
        title: 'user list',
        message: 'this is page user',
        list: db.get('users').value() // lấy dữ liệu ra
    });
}
module.exports.search = (req, res) => {
    var q = req.query.q;
    console.log(q);
    let dataUser = db.get('users').value();
    var match = dataUser.filter((users) => { return users.name.toLowerCase().indexOf(q.toLowerCase()) != -1 }); // ex2 :  một phần trùng 
    console.log(match);
    res.render('users/index', {
        title: 'user list search',
        message: 'result search ' + q,
        list: match,
        search: q
    });
    // ex1 : http://localhost:3000/users/search?q=John
    // ex2 : http://localhost:3000/users/search?q=t
}
module.exports.create = (req, res) => {
    res.render('users/create', {
        title: 'Create user'
    });
}
module.exports.postCreate = (req, res) => {
    req.body.id = shortid.generate(); // tạo id 
    // Add a post
    db.get('users')
    .push(req.body)
    .write()
    // redirect ==> users
    res.redirect('/users')
}
module.exports.get = (req, res) => {
    let id = req.params.id; // dữ liệu này luôn là string
    console.log(typeof id);
    // get information about user
    let info = db.get('users').find({ id: id}).value()
    console.log(info);
    res.render('users/view',
    {
        title: 'Information user',
        message: info.name,
        user: info
    });
}



// module.exports = {
//     a: 1, bb: 2
// }
// // <==>
// module.exports.a = 1;
// module.exports.b = 2;
///////////////////////////////////////////////////////// TEMPLATE LAYOUT ////////////////////////////////////////////////////////
: Sử dụng inheritance: Extends and blobk
Cấu trúc thư mục
	controllers		// như cũ
		| user.contronller.js
	routers		// như cũ
		| user.route.js
	views
		| layouts
			| common.pug
		| users
			| create.pug
			| index.pug
			| view.pug
		| index.js
	db.js			// như cũ
	db.json		// như cũ
	index.js		// như cũ
	nodemon.json	// như cũ

CODE file views/index.pug

extends layouts/common
block content
    h1 hello world
    a(href="/users") User list

block section
    p This is 1 phần của page HOME

CODE file views/users/view.pug

extends ../layouts/common
block content
    h1= message
    ul 
        li
            b id : 
            span=user.id
            br
            b name : 
            span=user.name
            br
            b  email : 
            span=user.email
            br
            b country : 
            span=user.from
block section
    p This is 1 phần của page view info User

CODE file views/users/index.pug

extends ../layouts/common
block content
    h1= message
    a(href="/users/create") new user
    -console.log(typeof list)
    -console.log(list.length)
    if checkAdd != undefined
        if checkAdd  
            p(style={color: 'red'}) them user thanh cong
        else 
            p='khong the them user' + checkAdd
    form(action="/users/search" method="GET")
        label(for='name') Search Name  
        input.form-control(type='text' name='q' placeholder='enter name' value=search)
        button.btn.btn-primary(type='submit') Search
    ul 
        each val in list 
            li
                span= 'name : ' +val.name +  ' email : ' +val.email + ' country : ' +val.from
                a(href="/users/"+val.id)   &nbsp; &nbsp; view
block section
    p This is 1 phần của page list User

CODE file views/users/create.pug

extends ../layouts/common
block content
    h1 Create User

    form(action="/users/create" method="POST")
        .form-group
            label(for='name') Name
            input.form-control(type='text' name='name' placeholder='enter name')
        .form-group
            label(for='email') Email
            input.form-control(type='text' name='email' placeholder='enter email')
        .form-group
            label(for='from') Country
            input.form-control(type='text' name='from' placeholder='enter country')
        button.btn.btn-primary(type='submit') Submit
block section
    p This is 1 phần của page CREATE

CODE file views/layouts/common.pug

doctype
html(lang='en')
    head
        meta(charset='utf-8')
        title= title
        link(rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css", attr)
        script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js")
    body
        block content
        block section
    footer
        h4 footer minh tuan design
/////////////////////////////////////////////////////// STATIC FILE /////////////////////////////////////////////////////////////
: Static path
- images
- css file
- fonts
- js file
- other documents
: Cung cấp các tệp tĩnh như hình ảnh, tệp css và tệp javascript , sử dụng express.static(root,[options]) được tích hợp sẵn trong 
middleware
	- app.use(express.static('public'))
: Express tra cứu các tệp theo thứ tự mà bạn đặt thư mục tĩnh bằng middleware express.static
	- app.use(express.static('public'))
	- app.use(express.static('files'))
: Để tạo tiền tố đường dẫn ảo(trong đó đường dẫn không thực sự tồn tại trong hệ thống tệp) cho các tệp được cung cấp bởi hàm
express.static()
	- app.use('/static', express.static('public'))
: Sử dụng đường dẫn tuyệt đối của thư mục bạn muốn 
	- const path = require('path')
	- app.use('/static', express.static(path.join(__dirname, 'public')))
Cấu trúc thư mục:
	controllers			// như cũ
		| user.controller.js
	public
		| images
			| logo_black.png
		| styles
			| custom.css
	routers			// như cũ
		| user.route.js
	views
		| layouts
			| common.pug
		| users		// như cũ
			| create.pug
			| index.pug
			| view.pug
		| index.pug		// như cũ
	db.js				// như cũ
	db.json			// tự động
	index.js
	nodemon.json		// như cũ

CODE file index.js

const express = require('express');

// require router users
const usersRouter = require('./routers/user.route');

// khởi tạo ứng dụng thông qua phương thức express()
const app = express();
const port = 3000;

//từ Express 4.16.0 mặc định body parser đã được cấu hình sẵn trong file app.js
// sử dụng 2 middleware bên dưới để sử dụng req.body
app.use(express.json()); // for parsing application/json
app.use(express.urlencoded({ extended: true })); // for parsing application/x-www-form-urlencoded

// static file 
app.use(express.static('public'));

// template engine
app.set('views', './views'); // folder chứa view
app.set('view engine', 'pug'); // khai báo template

// router handler
app.get('/', (req, res) => {
    res.render('index', { title: 'ex template' });
});

// middleware router
app.use('/users', usersRouter);

app.listen(port, () => {
    console.log('listening on port', port);
});

CODE file views/layouts/common.pug

doctype
html(lang='en')
    head
        meta(charset='utf-8')
        title= title
        link(rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css", attr)
        script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js")
        link(rel="stylesheet" href="/styles/custom.css")
    body
        ul.nav.nav-custom 
            li.nav-item
                a(href="/") 
                    img(src="/images/logo_black.png" alt="").logo_black 
            li.nav-item 
                a(href="/users").nav-link User List
            li.nav-item 
                a(href="/users/create").nav-link  New User
        .container.p-5.pb-0.mb-4
            block content
        block section
        footer
            h4 footer minh tuan design

CODE file public/styles/custom.css
*,
*::before,
*::after {
  box-sizing: border-box;
}
* {
  margin: 0;
  padding: 0;
}
body {
  line-height: 1.5;
}
img,
picture,
video,
canvas,
svg {
  display: block;
  max-width: 100%;
}
input,
button,
textarea,
select {
  outline: none;
}
p,
h1,
h2,
h3,
h4,
h5,
h6 {
  overflow-wrap: break-word;
}
.nav-custom {
    align-items: center;
    background-color: rgb(223, 212, 212);
}
.logo_black {
    width: 50px
}

//////////////////////////////////////////////////////////// SERVER-SIDE VALIDATION /////////////////////////////////////////////
: VALIDATION cho form CREATE USERS // SỬ DỤNG BOOSTAP LÀM LẠI GIAO DIỆN
Cấu trúc thư mục:

	controllers			
		| user.controller.js
	public
		| images
			| logo_black.png
		| styles
			| custom.css
	routers			// như cũ
		| user.route.js	
	views
		| layouts
			| common.pug
		| users		
			| create.pug
			| index.pug
			| view.pug	// như cũ
		| index.pug		// như cũ
	db.js				// như cũ
	db.json			// tự động
	index.js			// như cũ
	nodemon.json		// như cũ

CODE file views/users/index.pug

extends ../layouts/common
block content
    h1= message
    -console.log(typeof list)
    -console.log(list.length)
    if checkAdd != undefined
        if checkAdd  
            p(style={color: 'red'}) them user thanh cong
        else 
            p='khong the them user' + checkAdd
    form(action="/users/search" method="GET").d-flex
        label(for='name' style="font-weight: 500").form-label Search Name
        .ms-auto
            .input-group.mb-4
                input.form-control(type='text' name='q' placeholder='enter name' value=search)
                button.btn.btn-primary(type='submit') Search
    table.table.table-bordered
        tr 
            th STT
            th Name
            th Email
            th From
            th Phone
            th action
        each val, index in list 
            tr 
                td= index+1
                td= val.name
                td= val.email
                td= val.from
                td= val.phone
                td
                    a(href="/users/"+val.id).btn.btn-sm.btn-light view
block section
    p This is 1 phần của page list User

CODE  file views/users/create.pug

extends ../layouts/common
block content
    h1 Create User
    if errors
        each val in errors
            .alert.alert-danger.alert-dismissible.fade.show= val
                button.btn-close(type='button' data-bs-dismiss='alert')
    if values == undefined
        -values = {name: '', email: '', phone: '', from: ''}
    form(action="/users/create" method="POST")
        .form-group.mb-2
            label(for='name').form-label Name
            input#name.form-control(type='text' name='name' placeholder='enter name' value=values.name)
        .form-group.mb-2
            label(for='email').from-label Email
            input#email.form-control(type='text' name='email' placeholder='enter email' value=values.email)
        .form-group.mb-2
            label(for='phone').from-label Phone Number
            input#phone.form-control(type='text' name='phone' placeholder='enter email' value=values.phone)
        .form-group.mb-3
            label(for='from').form-label Country
            input#from.form-control(type='text' name='from' placeholder='enter country' value=values.from)
        button.btn.btn-success.btn-sm(type='submit') Submit
block section
    p This is 1 phần của page CREATE

CODE file views/layouts/common.pug

doctype
html(lang='en')
    head
        meta(charset='utf-8')
        title= title
        link(rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css", attr)
        script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js")
        link(rel="stylesheet" href="/styles/custom.css")
    body
        ul.nav.nav-custom 
            li.nav-item
                a(href="/") 
                    img(src="/images/logo_black.png" alt="").logo_black 
            li.nav-item 
                a(href="/users").nav-link User List
            li.nav-item 
                a(href="/users/create").nav-link  New User
        .container.p-5.pb-0.mb-4
            block content
        block section
        footer
            h4 footer minh tuan design

CODE file controllers/user.controller.js

const shortid = require('shortid'); // tạo id không trùng lặp
// require module of project
const db = require('../db');

module.exports.index = (req, res) => {
    res.render('users/index', {
        title: 'user list',
        message: 'this is page user',
        list: db.get('users').value() // lấy dữ liệu ra
    });
}
module.exports.search = (req, res) => {
    var q = req.query.q;
    console.log(q);
    let dataUser = db.get('users').value();
    var match = dataUser.filter((users) => { return users.name.toLowerCase().indexOf(q.toLowerCase()) != -1 }); // ex2 :  một phần trùng 
    console.log(match);
    res.render('users/index', {
        title: 'user list search',
        message: 'result search ' + q,
        list: match,
        search: q
    });
    // ex1 : http://localhost:3000/users/search?q=John
    // ex2 : http://localhost:3000/users/search?q=t
}
module.exports.create = (req, res) => {
    res.render('users/create', {
        title: 'Create user'
    });
}
module.exports.postCreate = (req, res) => {
    req.body.id = shortid.generate(); // tạo id 
    var error = [];
    // Add a post
    if (!req.body.name) {
        error.push('name is required');
    }
    if (!req.body.email) {
        error.push('email is required');
    }
    if (!req.body.phone) {
        error.push('phone is required');
    }
    if (!req.body.from) {
        error.push('from is required');
    }
    if (error.length > 0) {
        res.render('users/create', {
            title: 'Create user',
            errors: error,
            values: req.body
        });
        return;
    } else {
        db.get('users')
            .push(req.body)
            .write()
        // redirect ==> users
        res.redirect('/users')
    }
}
module.exports.get = (req, res) => {
    let id = req.params.id; // dữ liệu này luôn là string
    console.log(typeof id);
    // get information about user
    let info = db.get('users').find({ id: id }).value()
    console.log(info);
    res.render('users/view',
        {
            title: 'Information user',
            message: info.name,
            user: info
        });
}



// module.exports = {
//     a: 1, bb: 2
// }
// // <==>
// module.exports.a = 1;
// module.exports.b = 2;

////////////////////////////////////////////////////////////// MIDDLEWARE ///////////////////////////////////////////////////////
: Tạo middleware cho việc validate form
: res.locals : Sử dụng thuộc tính này đễ đặt các biến có thể truy cập trong template được hiển thị bằng res.render
		 : Có sẵn trong một chu kỳ req-res duy nhất
		 : Hữu ích để hiển thị thông tin như (tên đường dẫn req, authenticaion, user setting cho các template render trong app)
	: Để giữ các biến cục bộ để sử dụng trong việc hiển thị template giữa các req sử dụng app.locals để thay thế

Cấu trúc thư mục :

	controllers			
		| user.controller.js
	public			// như cũ	
		| images
			| logo_black.png
		| styles
			| custom.css
	routers			
		| user.route.js
	validates
		| user.validate.js	
	views				// như cũ	
		| layouts
			| common.pug
		| users		
			| create.pug
			| index.pug
			| view.pug	
		| index.pug		
	db.js				// như cũ
	db.json			// tự động
	index.js			// như cũ
	nodemon.json		// như cũ

CODE file controllers/user.controller.js

const shortid = require('shortid'); // tạo id không trùng lặp
// require module of project
const db = require('../db');

module.exports.index = (req, res) => {
    res.render('users/index', {
        title: 'user list',
        message: 'this is page user',
        list: db.get('users').value() // lấy dữ liệu ra
    });
}
module.exports.search = (req, res) => {
    var q = req.query.q;
    console.log(q);
    let dataUser = db.get('users').value();
    var match = dataUser.filter((users) => { return users.name.toLowerCase().indexOf(q.toLowerCase()) != -1 }); // ex2 :  một phần trùng 
    console.log(match);
    res.render('users/index', {
        title: 'user list search',
        message: 'result search ' + q,
        list: match,
        search: q
    });
    // ex1 : http://localhost:3000/users/search?q=John
    // ex2 : http://localhost:3000/users/search?q=t
}
module.exports.create = (req, res) => {
    res.render('users/create', {
        title: 'Create user'
    });
}
module.exports.postCreate = (req, res) => {
    req.body.id = shortid.generate(); // tạo id 
    
    console.log(res.locals.success);

    db.get('users')
        .push(req.body)
        .write()
    // redirect ==> users
    res.redirect('/users')
}
module.exports.get = (req, res) => {
    let id = req.params.id; // dữ liệu này luôn là string
    console.log(typeof id);
    // get information about user
    let info = db.get('users').find({ id: id }).value()
    console.log(info);
    res.render('users/view',
        {
            title: 'Information user',
            message: info.name,
            user: info
        });
}

// module.exports = {
//     a: 1, bb: 2
// }
// // <==>
// module.exports.a = 1;
// module.exports.b = 2;

CODE file routers/user.route.js

const express = require('express');
const router = express.Router();

const controller = require('../controllers/user.controller');
const validate = require('../validates/user.validate');

router.get('/', controller.index);
router.get('/search', controller.search)
router.get('/create', controller.create)
router.post('/create', validate.postCreate, controller.postCreate)
// dynamic routing
router.get('/:id', controller.get)

module.exports = router;

CODE file validates/user.validate.js

module.exports.postCreate = (req, res, next) => {
    var error = [];
    // Add a post
    if (!req.body.name) {
        error.push('name is required');
    }
    if (!req.body.email) {
        error.push('email is required');
    }
    if (!req.body.phone) {
        error.push('phone is required');
    }
    if (!req.body.from) {
        error.push('from is required');
    }
    if (error.length > 0) {
        res.render('users/create', {
            title: 'Create user',
            errors: error,
            values: req.body
        });
        return;
    }
    res.locals.success = true;
    next();
}

////////////////////////////////////////////////////////// COOKIE ///////////////////////////////////////////////////////////////
: server gửi về browser sau đó browser gửi lên sau mỗi lần request
: npm install cookie-parser

: Sử dụng middleware cookie-parse để phân tích cú pháp cookie
	 + const cookieParser = require('cookie-parser');
	 + app.use(cookieParser); // load middleware
: COOKIE phân chia làm 2 loại
	- Session cookies(phiên cookies): cookies này được giữ lại ở trình duyệt và sẽ xóa bỏ khi đóng trình duyệt. Khi cửa 
sổ trình mới được mở lại, người dùng sẽ phải cung cấp lại các chứng thực của mình.

	- Persistent cookies(cookies liên tục): cookies này được giữ ở trình duyệt cho tới khi hết hạn hoặc được xóa một cách thủ 
công. Các trang web sẽ ghi nhớ các chứng thực ngay cả khi người dùng đóng trình duyệt.

: Ứng dụng quan trọng của cookies là giữ cho người dùng đăng nhập khi họ chuyển từ trang này qua trang khác . Một số trang web 
thương mại điện tự thì sử dụng cả sesion cookies và persistent cookies để tạo sự liền mạch cho giỏ hàng khi mua sắm.
: HOẠT ĐỘNG
	- Khi người dùng truy cập vao trang web lần đầy tiên, trang web sẽ tạo ra bản ghi của nó và lưu vào cookies trên trình 
duyệt của người dùng. Nó chứa URL của trang web đã đặt cookie.
	- Khi người dùng quay lại và lướt web, mỗi trang mới mà người dùng truy cập, trình duyệt sẽ tìm kiếm cookie. Nếu URL của 
cookies khớp với URL của trang web, trang web sẽ truy xuất thông tin máy chủ bằng cách sử dụng thông tin lấy được từ cookies
: COOKIES
	+ Name	 : một tên duy nhất dùng để định danh. Tên cookies không phân biệt chữ hoa thường. trong thực tế ta nên phân biệt 
hoa thường. Tên cookies phải được mã hóa URL (URL encoded)
	+ Value	 : giá trị được lưu trữ trong cookies, giá trị này cũng nên được mã hóa URL
	+ Domain	 : mọi thứ được gửi hoặc sử dụng từ domain này sẽ kèm theo cookies
	+ Path	 : đường dẫn được chỉ định trong domain, nơi mà cookies sẽ được gửi đến server.
	+ Expiration : đây là dấu thời gian, nó cho biết lúc nào cookies sẽ bị xóa. Mặc định thì cookies sẽ bị xóa sau khi tắt trình
duyệt. Tuy nhiên, ta có thể xác định thời gian cố định để xóa, giá trị này được đặt theo dạng GMT(Wdy, DD-Mon-YYYY HH:MM:SS GMT).
	+ Secure Flag: cờ an toàn, với mục đính chỉ gửi cookies nếu kết nối SSL được sử dụng. ví dụ gửi tới https:: thì gửi kèm cookies
còn tới http:: thì không

: res.cookie(name,value,[option])
	- value   : có thể là một chuổi hoặc một đối tượng được chuyển đổi thành JSON.
	- options : tham số options có thể là một đối tượng có thể có các thuộc tính sau

-------------------------------------------------------------------------------------------
Propperty      |     Type   |                                       Description
-------------------------------------------------------------------------------------------
domain	      String	Tên miền cho cookie mặc định là tên miền app.
encode		Function	Một chức năng đồng bộ được sử dụng để mã hóa giá trị cookie.
expires		Date		Ngày hết hạn của cookie theo GMT, nếu không được đặt thì sẽ bằng 0.
httpOnly		Boolean	Gắn cờ cho cookie chỉ có thể truy cập được bởi máy chủ web.
maxAge		Number	Tùy chọn thuận tiện để đặt thời gian hết hạn so với thời gian hiện tại
					tính bằng mili giây.
path			String	Đường dẫn cho cookie. Mặc định là '/'.
priority		String	Giá trị của thuộc tính set-cookie 'ưu tiên'.
secure 		Boolean	Đánh dấu cookie chỉ được sử dụng với HTTPS.
signed		Boolean	Cho biết cookie có được ký hay không.
	Ví dụ: 
			res.cookie('name', 'minh tuan', {domain: 'example.com', path: '/admin', secure: true })
			res.cookie('rememberme', '1', {expires : new Date(Date.now() + 9000000), httpOnly: true})
		- đặt nhiều cookie cho một res
			res.status(201)
			   .cookie('access_token', 'Bearer' + token,{
				expires: new Date(Date.now() + 8 * 3600000) // cookie sẽ tự xóa sau 8 giờ
			})
			.cookie('text', 'text')
			.redirect(301, '/admin')
		- đặt thời gian hết hạn so với thời gian hiện tại
			res.cookie('rememberme', '1', {maxAge: 9000000, httpOnly: true})
: res.clearCookie(name,[options]) : Xóa cookie được chỉ định theo tên.
					    : Các trình duyệt web và các ứng dụng khác tuân thủ khác sẽ chỉ xóa cookie nếu tùy chọn đã cho
giống với các tùy chọn được cung cấp cho res.cookie(), ngoại trừ options expries và maxAge.
	Ví dụ: res.cookie('name', 'tobi', {path: '/admin'})
		 res.clearCookie('name', {path: '/admin'})

Cấu trúc thư mục :

	controllers			
		| user.controller.js
	public			// như cũ	
		| images
			| logo_black.png
		| styles
			| custom.css
	routers			
		| user.route.js
	validates			// như cũ
		| user.validate.js	
	views				// như cũ	
		| layouts
			| common.pug
		| users		
			| create.pug
			| index.pug
			| view.pug	
		| index.pug		
	db.js				// như cũ
	db.json			// tự động
	index.js			// như cũ
	nodemon.json			// như cũ
CODE trong file Routers/user.route.js

const express = require('express');
const cookieParser = require('cookie-parser');

// require router users
const usersRouter = require('./routers/user.route');

// khởi tạo ứng dụng thông qua phương thức express()
const app = express();
const port = 3000;

//từ Express 4.16.0 mặc định body parser đã được cấu hình sẵn trong file app.js
// sử dụng 2 middleware bên dưới để sử dụng req.body
app.use(express.json()); // for parsing application/json
app.use(express.urlencoded({ extended: true })); // for parsing application/x-www-form-urlencoded
// sử dụng middleware cookie-parser để phân tích cookie
app.use(cookieParser()); // load middleware cookie parser
// static file 
app.use(express.static('public'));

// template engine
app.set('views', './views'); // folder chứa view
app.set('view engine', 'pug'); // khai báo template

// router handler
app.get('/', (req, res) => {
    res.render('index', { title: 'ex template' });
});

// middleware router
app.use('/users', usersRouter);

app.listen(port, () => {
    console.log('listening on port', port);
});

CODE trong file Controllers/user.controller.js

const shortid = require('shortid'); // tạo id không trùng lặp
// require module of project
const db = require('../db');

module.exports.index = (req, res) => {
    res.render('users/index', {
        title: 'user list',
        message: 'this is page user',
        list: db.get('users').value() // lấy dữ liệu ra
    });
}
module.exports.search = (req, res) => {
    var q = req.query.q;
    console.log(q);
    let dataUser = db.get('users').value();
    var match = dataUser.filter((users) => { return users.name.toLowerCase().indexOf(q.toLowerCase()) != -1 }); // ex2 :  một phần trùng 
    console.log(match);
    res.render('users/index', {
        title: 'user list search',
        message: 'result search ' + q,
        list: match,
        search: q
    });
    // ex1 : http://localhost:3000/users/search?q=John
    // ex2 : http://localhost:3000/users/search?q=t
}
module.exports.create = (req, res) => {
    console.log(req.cookies);
    res.render('users/create', {
        title: 'Create user'
    });
}
module.exports.postCreate = (req, res) => {
    req.body.id = shortid.generate(); // tạo id 
    console.log(res.locals.success);
    db.get('users')
        .push(req.body)
        .write()
    // redirect ==> users
    res.redirect('/users')
}
module.exports.get = (req, res) => {
    let id = req.params.id; // dữ liệu này luôn là string
    console.log(typeof id);
    // get information about user
    let info = db.get('users').find({ id: id }).value()
    console.log(info);
    res.render('users/view',
        {
            title: 'Information user',
            message: info.name,
            user: info
        });
}

// module.exports = {
//     a: 1, bb: 2
// }
// // <==>
// module.exports.a = 1;
// module.exports.b = 2;















